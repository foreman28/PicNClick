generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique
  email     String      @unique
  password  String
  role      String?
  fullName  String?
  avatarURL String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  posts     ForumPost[]
  comment   Comment[]
  // Like      Like[]
  like      Like[]
}

model ForumPost {
  id          Int      @id @default(autoincrement())
  url         String   @unique
  title       String   @unique
  description String
  content     String
  authorId    Int
  image       String?
  timestamp   DateTime @default(now())

  tags Tags[]

  likes     Like[]
  likeCount Int    @default(0)

  comments     Comment[]
  commentCount Int       @default(0)

  // Отношение к User
  author User @relation(fields: [authorId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  // Relations
  post ForumPost @relation(fields: [postId], references: [id])
  user User      @relation(fields: [userId], references: [id])

  // Add a unique constraint to ensure a user can like a post only once
  @@unique([postId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  // Связь с ForumPost и User
  post ForumPost @relation(fields: [postId], references: [id])
  user User      @relation(fields: [userId], references: [id])
}

model Tags {
  id          Int      @id @default(autoincrement())
  url         String   @unique
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  // Добавляем обратное отношение к модели ForumPost
  posts ForumPost[]
}
